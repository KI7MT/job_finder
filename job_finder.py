"""
Job Finder

Gathers IT Jobs from the State of Montana,
which are located in Helena, MT, 
and notifies a group of users about it.

Built for the IT students of UM Helena.
"""

import sys
import requests
from lxml import html
import time
import urllib
import sqlite3
from db_util import db_util
from job import job
from recipient import recipient
from job_emailer import job_emailer

class job_finder(object):

	def __init__(self):
		"""Constructor"""

		self.dbu = db_util()

		self.conn_closed = False

	def gather_and_review_jobs(self):
		"""Gathers the jobs from the web, 
		compares them to those in the database,
		and notifies the recipients if necessary.
		"""
		print('Gathering and Reviewing Jobs')

		self.mailer = job_emailer()

		self.current_recipients = self.dbu.gather_current_recipients()

		self.current_jobs = self.dbu.gather_current_jobs()

		changes_made = self.review_jobs()

		if changes_made: self.notify_recipients()

		self.dbu.close_connection()

		self.conn_closed = True

	def add_recipient(self,email):
		"""Adds the given recipient to the database.
		
		Arguments:
			email {str} -- The recipient's email to add to the database.
		"""

		self.dbu.add_recipient(email)

	def add_recipients(self,file_name):

		print('Saving Recipients in ' + file_name)

		emails = open(file_name).readlines()

		for email in emails: self.add_recipient(email.strip())

	def remove_recipient(self,email):
		"""Removes the given recipient from the database.
		
		Arguments:
			email {str} -- The recipient's email to remove from the database.
		"""

		self.dbu.remove_recipient(email)

	def remove_recipients(self,file_name):

		print('Removing Recipients in ' + file_name)

		emails = open(file_name).readlines()

		for email in emails: self.remove_recipient(email.strip())

	def review_jobs(self):
		"""Gathers all the jobs from the State of MT jobs site,
		saving those that are new,
		and deleting those that have closed.
		"""
		print('Reviewing Jobs')

		jobs_on_site = self.gather_jobs_on_site()

		jobs_to_save = self.find_jobs_to_save(jobs_on_site)

		jobs_to_delete = self.find_jobs_to_delete(jobs_on_site)

		self.dbu.save_jobs(jobs_to_save)

		self.dbu.delete_jobs(jobs_to_delete)

		changes_made = len(jobs_to_save) > 0 or len(jobs_to_delete) > 0

		return changes_made

	def gather_jobs_on_site(self):
		"""Grabs the jobs from the State of MT website.
		
		Returns:
			list -- The of jobs to delete.
		"""

		print('Gathering Jobs From Site')

		jobs_on_site = []

		# Prepare everything necessary to gather the webpage data.
		url = 'https://mtstatejobs.taleo.net/careersection/rest/jobboard/searchjobs?lang=en&portal=101430233'

		headers = {'Content-Type':'application/json','Accept':'application/json'}

		payload = {"multilineEnabled":'false',"sortingSelection":{"sortBySelectionParam":"5","ascendingSortingOrder":"true"},"fieldData":{"fields":{"KEYWORD":"","LOCATION":"","ORGANIZATION":""},"valid":'true'},"filterSelectionParam":{"searchFilterSelections":[{"id":"POSTING_DATE","selectedValues":[]},{"id":"LOCATION","selectedValues":["20300100198"]},{"id":"JOB_FIELD","selectedValues":["7000100198"]}]},"advancedSearchFiltersSelectionParam":{"searchFilterSelections":[{"id":"ORGANIZATION","selectedValues":[]},{"id":"LOCATION","selectedValues":[]},{"id":"JOB_FIELD","selectedValues":[]},{"id":"STUDY_LEVEL","selectedValues":[]},{"id":"WILL_TRAVEL","selectedValues":[]},{"id":"JOB_SHIFT","selectedValues":[]}]},"pageNo":1}

		# Gather the webpage data.
		response = requests.post(url, json=payload)

		json_data = response.json()

		# Pull out just the jobs data from the webpage data.
		jobs_data = json_data['requisitionList']

		# Iterate through the jobs data.
		for job_data in jobs_data:

			# Generated by the state, used to identify the job.
			site_id = job_data['jobId']

			# Generated by the state, used to identify the job's webpage.
			contest_num = job_data['contestNo']

			# The job's full webpage (I.e. contains all the detailed job info.)
			site_url = 'https://mtstatejobs.taleo.net/careersection/200/jobdetail.ftl?job={}'.format(contest_num)

			# Contains the primary job details such as...
			target_data = job_data['column']

			# ...Title...
			title = target_data[0]

			# ... and Department.
			dept = target_data[2]

			# Uncomment this to see what else is included.
			#print(target_data)

			# No way to guarantee that the site_id and contest_num will always be unique, so a hashcode is generated.
			job_id = hash(site_id + contest_num + site_url + title + dept)

			# Create a job object with the collected data.
			new_job = job([job_id,site_id,contest_num,title,dept,site_url])

			jobs_on_site.append(new_job)

		return jobs_on_site

	def find_jobs_to_save(self,jobs_on_site):
		"""From the list of jobs that have been pulled from the web,
		finds those that need to be saved.
		
		Arguments:
			jobs_on_site {list} -- The jobs that have been pulled from the web.
		
		Returns:
			list -- The jobs that should be saved.
		"""
		print('Finding jobs to save')

		jobs_to_save = []

		current_job_ids = self.gather_job_ids(self.current_jobs)

		for job in jobs_on_site:

			job_id = job.job_id

			if job_id not in current_job_ids: jobs_to_save.append(job)

		print('Found {} Jobs To Save'.format(len(jobs_to_save)))

		return jobs_to_save

	def find_jobs_to_delete(self,jobs_on_site):
		"""From the list of jobs that have been pulled from the web,
		finds those that need to be deleted.
		
		Arguments:
			jobs_on_site {list} -- The jobs that have been pulled from the web.
		
		Returns:
			list -- The jobs that should be saved.
		"""
		print('Finding jobs to delete')

		jobs_to_delete = []

		site_job_ids = self.gather_job_ids(jobs_on_site)

		for job in self.current_jobs:

			if job.job_id not in site_job_ids: jobs_to_delete.append(job)

		print('Found {} Jobs to Delete'.format(len(jobs_to_delete)))

		return jobs_to_delete

	def gather_job_ids(self,jobs):
		"""Creates a list of job ids from a given list of jobs.
		
		Arguments:
			jobs {list} -- The jobs to gather the ids from.
		
		Returns:
			list -- The job ids pulled from the provided jobs.
		"""

		job_ids = []

		for job in jobs:

			job_ids.append(job.job_id)

		return job_ids

	def notify_recipients(self):
		"""Notifies all recipients in the database about a job closing or opening."""
		
		print('Notifying Recipients')

		for job in self.dbu.saved_jobs: self.mailer.notify_recipients_of_job(self.current_recipients,job)

		for job in self.dbu.deleted_jobs: self.mailer.notify_recipients_of_job(self.current_recipients,job,False)